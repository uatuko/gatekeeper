syntax = "proto3";

package ruek.api.v1;

import "google/protobuf/struct.proto";

option go_package = "github.com/uatuko/ruek/proto/.gen/go/ruekpb;ruekpb";

service Relations {
	rpc Check(RelationsCheckRequest) returns (RelationsCheckResponse);
	rpc Create(RelationsCreateRequest) returns (RelationsCreateResponse);
	rpc Delete(RelationsDeleteRequest) returns (RelationsDeleteResponse);
	rpc DeleteById(RelationsDeleteByIdRequest) returns (RelationsDeleteByIdResponse);
	rpc ListLeft(RelationsListLeftRequest) returns (RelationsListLeftResponse);
	rpc ListRight(RelationsListRightRequest) returns (RelationsListRightResponse);
}

message Entity {
	string id   = 1;
	string type = 2;
}

message Tuple {
	string space_id = 1;
	string id       = 2;

	oneof left {
		Entity left_entity       = 3;
		string left_principal_id = 4;
	}

	string relation = 7;

	oneof right {
		Entity right_entity       = 5;
		string right_principal_id = 6;
	}

	optional string strand                = 8;
	optional google.protobuf.Struct attrs = 9;

	optional string ref_id_left  = 10;
	optional string ref_id_right = 11;
}

message RelationsCheckRequest {
	oneof left {
		Entity left_entity       = 1;
		string left_principal_id = 2;
	}

	string relation = 5;

	oneof right {
		Entity right_entity       = 3;
		string right_principal_id = 4;
	}

	// Lookup strategy to use. Defaults to `2` (direct).
	//
	// Strategies:
	//   2 (direct) - Only check if there's a direct relation exists between the entities.
	//   4 (graph)  - If a direct relation cannot be found between the entities, use a graph traversal
	//                algorithm to derive a relation.
	//   8 (set)    - Check if there's a direct relation exists between the entities and if not, use
	//                a set intersection algorithm to derive a relation between the entities.
	optional uint32 strategy = 6;

	// Limits the lookup cost. The value must be within `1` and `65535`. Defaults to `1000`.
	optional uint32 cost_limit = 7;
}

message RelationsCheckResponse {
	// Indicates if a relation exists or could be derived using the lookup strategy.
	bool found = 1;

	// Cost of lookups. A negative cost indicates the lookup cost exceeded the limit and the process
	// _may_ have been abandoned without computing all possible derivations.
	int32 cost = 2;

	// Tuple containing relation data that matched the query. An empty tuple `id` indicates a computed
	// tuple which isn't stored.
	optional Tuple tuple = 3;

	// Path that derived the relation between entities when using the `graph` lookup strategy.
	repeated Tuple path = 4;
}

message RelationsCreateRequest {
	oneof left {
		Entity left_entity       = 1;
		string left_principal_id = 2;
	}

	string relation = 5;

	oneof right {
		Entity right_entity       = 3;
		string right_principal_id = 4;
	}

	optional string strand = 6;

	optional google.protobuf.Struct attrs = 7;

	// Optimization strategy to use when computing and storing derived relations to improve lookup speeds.
	// Defaults to `4` (graph).
	//
	// Strategies:
	//   2 (direct) - Optimize for direct lookups. Best for lookup speeds but can produce large numbers
	//                of computed relations resulting in expensive write operations.
	//   4 (graph)  - Don't optimize. Lookups will need to use a graph traversal algorithm to derive
	//                relations.
	//   8 (set)    - Optimize by computing derived relations between principals, which the lookups
	//                can utilise in a set intersection algorithm.
	optional uint32 optimize = 8;

	// Limits the cost for computing and storing derived relations. The value must be within `1` and
	// `65535`. Defaults to `1000`.
	optional uint32 cost_limit = 9;
}

message RelationsCreateResponse {
	// Tuple containing the relation data.
	Tuple tuple = 1;

	// Cost of creating the relation. A negative cost indicates only the relation was created but computing
	// and storing derived relations was aborted.
	int32 cost = 2;

	// Computed and _maybe_ stored derived relation tuples. If the `cost` returned is negative, this
	// _may_ contain a partial list. Any tuple with an empty id indicates it's only computed but not
	// stored (i.e. dirty).
	repeated Tuple computed_tuples = 3;
}

message RelationsDeleteRequest {
	oneof left {
		Entity left_entity       = 1;
		string left_principal_id = 2;
	}

	string relation = 5;

	oneof right {
		Entity right_entity       = 3;
		string right_principal_id = 4;
	}

	optional string strand = 6;
}

message RelationsDeleteResponse {}

message RelationsDeleteByIdRequest {
	string id = 1;
}

message RelationsDeleteByIdResponse {}

message RelationsListLeftRequest {
	oneof right {
		Entity right_entity       = 1;
		string right_principal_id = 2;
	}

	optional string relation = 3;

	optional uint32 pagination_limit = 4;
	optional string pagination_token = 5;
}

message RelationsListLeftResponse {
	repeated Tuple tuples = 1;

	optional string pagination_token = 2;
}

message RelationsListRightRequest {
	oneof left {
		Entity left_entity       = 1;
		string left_principal_id = 2;
	}

	optional string relation = 3;

	optional uint32 pagination_limit = 4;
	optional string pagination_token = 5;
}

message RelationsListRightResponse {
	repeated Tuple tuples = 1;

	optional string pagination_token = 2;
}
