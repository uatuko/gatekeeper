// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/ruek/api/v1/principals.proto

package ruekpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Principals_Create_FullMethodName   = "/ruek.api.v1.Principals/Create"
	Principals_Delete_FullMethodName   = "/ruek.api.v1.Principals/Delete"
	Principals_List_FullMethodName     = "/ruek.api.v1.Principals/List"
	Principals_Retrieve_FullMethodName = "/ruek.api.v1.Principals/Retrieve"
	Principals_Update_FullMethodName   = "/ruek.api.v1.Principals/Update"
)

// PrincipalsClient is the client API for Principals service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrincipalsClient interface {
	Create(ctx context.Context, in *PrincipalsCreateRequest, opts ...grpc.CallOption) (*PrincipalsCreateResponse, error)
	Delete(ctx context.Context, in *PrincipalsDeleteRequest, opts ...grpc.CallOption) (*PrincipalsDeleteResponse, error)
	List(ctx context.Context, in *PrincipalsListRequest, opts ...grpc.CallOption) (*PrincipalsListResponse, error)
	Retrieve(ctx context.Context, in *PrincipalsRetrieveRequest, opts ...grpc.CallOption) (*PrincipalsRetrieveResponse, error)
	Update(ctx context.Context, in *PrincipalsUpdateRequest, opts ...grpc.CallOption) (*PrincipalsUpdateResponse, error)
}

type principalsClient struct {
	cc grpc.ClientConnInterface
}

func NewPrincipalsClient(cc grpc.ClientConnInterface) PrincipalsClient {
	return &principalsClient{cc}
}

func (c *principalsClient) Create(ctx context.Context, in *PrincipalsCreateRequest, opts ...grpc.CallOption) (*PrincipalsCreateResponse, error) {
	out := new(PrincipalsCreateResponse)
	err := c.cc.Invoke(ctx, Principals_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *principalsClient) Delete(ctx context.Context, in *PrincipalsDeleteRequest, opts ...grpc.CallOption) (*PrincipalsDeleteResponse, error) {
	out := new(PrincipalsDeleteResponse)
	err := c.cc.Invoke(ctx, Principals_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *principalsClient) List(ctx context.Context, in *PrincipalsListRequest, opts ...grpc.CallOption) (*PrincipalsListResponse, error) {
	out := new(PrincipalsListResponse)
	err := c.cc.Invoke(ctx, Principals_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *principalsClient) Retrieve(ctx context.Context, in *PrincipalsRetrieveRequest, opts ...grpc.CallOption) (*PrincipalsRetrieveResponse, error) {
	out := new(PrincipalsRetrieveResponse)
	err := c.cc.Invoke(ctx, Principals_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *principalsClient) Update(ctx context.Context, in *PrincipalsUpdateRequest, opts ...grpc.CallOption) (*PrincipalsUpdateResponse, error) {
	out := new(PrincipalsUpdateResponse)
	err := c.cc.Invoke(ctx, Principals_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrincipalsServer is the server API for Principals service.
// All implementations must embed UnimplementedPrincipalsServer
// for forward compatibility
type PrincipalsServer interface {
	Create(context.Context, *PrincipalsCreateRequest) (*PrincipalsCreateResponse, error)
	Delete(context.Context, *PrincipalsDeleteRequest) (*PrincipalsDeleteResponse, error)
	List(context.Context, *PrincipalsListRequest) (*PrincipalsListResponse, error)
	Retrieve(context.Context, *PrincipalsRetrieveRequest) (*PrincipalsRetrieveResponse, error)
	Update(context.Context, *PrincipalsUpdateRequest) (*PrincipalsUpdateResponse, error)
	mustEmbedUnimplementedPrincipalsServer()
}

// UnimplementedPrincipalsServer must be embedded to have forward compatible implementations.
type UnimplementedPrincipalsServer struct {
}

func (UnimplementedPrincipalsServer) Create(context.Context, *PrincipalsCreateRequest) (*PrincipalsCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPrincipalsServer) Delete(context.Context, *PrincipalsDeleteRequest) (*PrincipalsDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPrincipalsServer) List(context.Context, *PrincipalsListRequest) (*PrincipalsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPrincipalsServer) Retrieve(context.Context, *PrincipalsRetrieveRequest) (*PrincipalsRetrieveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedPrincipalsServer) Update(context.Context, *PrincipalsUpdateRequest) (*PrincipalsUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPrincipalsServer) mustEmbedUnimplementedPrincipalsServer() {}

// UnsafePrincipalsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrincipalsServer will
// result in compilation errors.
type UnsafePrincipalsServer interface {
	mustEmbedUnimplementedPrincipalsServer()
}

func RegisterPrincipalsServer(s grpc.ServiceRegistrar, srv PrincipalsServer) {
	s.RegisterService(&Principals_ServiceDesc, srv)
}

func _Principals_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrincipalsCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrincipalsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Principals_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrincipalsServer).Create(ctx, req.(*PrincipalsCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Principals_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrincipalsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrincipalsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Principals_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrincipalsServer).Delete(ctx, req.(*PrincipalsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Principals_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrincipalsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrincipalsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Principals_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrincipalsServer).List(ctx, req.(*PrincipalsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Principals_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrincipalsRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrincipalsServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Principals_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrincipalsServer).Retrieve(ctx, req.(*PrincipalsRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Principals_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrincipalsUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrincipalsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Principals_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrincipalsServer).Update(ctx, req.(*PrincipalsUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Principals_ServiceDesc is the grpc.ServiceDesc for Principals service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Principals_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ruek.api.v1.Principals",
	HandlerType: (*PrincipalsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Principals_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Principals_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Principals_List_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _Principals_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Principals_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ruek/api/v1/principals.proto",
}
