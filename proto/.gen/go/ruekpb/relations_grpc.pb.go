// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/ruek/api/v1/relations.proto

package ruekpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Relations_Check_FullMethodName     = "/ruek.api.v1.Relations/Check"
	Relations_Create_FullMethodName    = "/ruek.api.v1.Relations/Create"
	Relations_Delete_FullMethodName    = "/ruek.api.v1.Relations/Delete"
	Relations_ListLeft_FullMethodName  = "/ruek.api.v1.Relations/ListLeft"
	Relations_ListRight_FullMethodName = "/ruek.api.v1.Relations/ListRight"
)

// RelationsClient is the client API for Relations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationsClient interface {
	Check(ctx context.Context, in *RelationsCheckRequest, opts ...grpc.CallOption) (*RelationsCheckResponse, error)
	Create(ctx context.Context, in *RelationsCreateRequest, opts ...grpc.CallOption) (*RelationsCreateResponse, error)
	Delete(ctx context.Context, in *RelationsDeleteRequest, opts ...grpc.CallOption) (*RelationsDeleteResponse, error)
	ListLeft(ctx context.Context, in *RelationsListLeftRequest, opts ...grpc.CallOption) (*RelationsListLeftResponse, error)
	ListRight(ctx context.Context, in *RelationsListRightRequest, opts ...grpc.CallOption) (*RelationsListRightResponse, error)
}

type relationsClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationsClient(cc grpc.ClientConnInterface) RelationsClient {
	return &relationsClient{cc}
}

func (c *relationsClient) Check(ctx context.Context, in *RelationsCheckRequest, opts ...grpc.CallOption) (*RelationsCheckResponse, error) {
	out := new(RelationsCheckResponse)
	err := c.cc.Invoke(ctx, Relations_Check_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationsClient) Create(ctx context.Context, in *RelationsCreateRequest, opts ...grpc.CallOption) (*RelationsCreateResponse, error) {
	out := new(RelationsCreateResponse)
	err := c.cc.Invoke(ctx, Relations_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationsClient) Delete(ctx context.Context, in *RelationsDeleteRequest, opts ...grpc.CallOption) (*RelationsDeleteResponse, error) {
	out := new(RelationsDeleteResponse)
	err := c.cc.Invoke(ctx, Relations_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationsClient) ListLeft(ctx context.Context, in *RelationsListLeftRequest, opts ...grpc.CallOption) (*RelationsListLeftResponse, error) {
	out := new(RelationsListLeftResponse)
	err := c.cc.Invoke(ctx, Relations_ListLeft_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationsClient) ListRight(ctx context.Context, in *RelationsListRightRequest, opts ...grpc.CallOption) (*RelationsListRightResponse, error) {
	out := new(RelationsListRightResponse)
	err := c.cc.Invoke(ctx, Relations_ListRight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationsServer is the server API for Relations service.
// All implementations must embed UnimplementedRelationsServer
// for forward compatibility
type RelationsServer interface {
	Check(context.Context, *RelationsCheckRequest) (*RelationsCheckResponse, error)
	Create(context.Context, *RelationsCreateRequest) (*RelationsCreateResponse, error)
	Delete(context.Context, *RelationsDeleteRequest) (*RelationsDeleteResponse, error)
	ListLeft(context.Context, *RelationsListLeftRequest) (*RelationsListLeftResponse, error)
	ListRight(context.Context, *RelationsListRightRequest) (*RelationsListRightResponse, error)
	mustEmbedUnimplementedRelationsServer()
}

// UnimplementedRelationsServer must be embedded to have forward compatible implementations.
type UnimplementedRelationsServer struct {
}

func (UnimplementedRelationsServer) Check(context.Context, *RelationsCheckRequest) (*RelationsCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedRelationsServer) Create(context.Context, *RelationsCreateRequest) (*RelationsCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRelationsServer) Delete(context.Context, *RelationsDeleteRequest) (*RelationsDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRelationsServer) ListLeft(context.Context, *RelationsListLeftRequest) (*RelationsListLeftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLeft not implemented")
}
func (UnimplementedRelationsServer) ListRight(context.Context, *RelationsListRightRequest) (*RelationsListRightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRight not implemented")
}
func (UnimplementedRelationsServer) mustEmbedUnimplementedRelationsServer() {}

// UnsafeRelationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationsServer will
// result in compilation errors.
type UnsafeRelationsServer interface {
	mustEmbedUnimplementedRelationsServer()
}

func RegisterRelationsServer(s grpc.ServiceRegistrar, srv RelationsServer) {
	s.RegisterService(&Relations_ServiceDesc, srv)
}

func _Relations_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationsCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationsServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relations_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationsServer).Check(ctx, req.(*RelationsCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relations_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationsCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relations_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationsServer).Create(ctx, req.(*RelationsCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relations_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relations_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationsServer).Delete(ctx, req.(*RelationsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relations_ListLeft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationsListLeftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationsServer).ListLeft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relations_ListLeft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationsServer).ListLeft(ctx, req.(*RelationsListLeftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relations_ListRight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationsListRightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationsServer).ListRight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relations_ListRight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationsServer).ListRight(ctx, req.(*RelationsListRightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Relations_ServiceDesc is the grpc.ServiceDesc for Relations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Relations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ruek.api.v1.Relations",
	HandlerType: (*RelationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _Relations_Check_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Relations_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Relations_Delete_Handler,
		},
		{
			MethodName: "ListLeft",
			Handler:    _Relations_ListLeft_Handler,
		},
		{
			MethodName: "ListRight",
			Handler:    _Relations_ListRight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ruek/api/v1/relations.proto",
}
