// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.12
// source: proto/ruek/api/v1/relations.proto

package ruekpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Entity) Reset() {
	*x = Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ruek_api_v1_relations_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ruek_api_v1_relations_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_proto_ruek_api_v1_relations_proto_rawDescGZIP(), []int{0}
}

func (x *Entity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Entity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Tuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Left:
	//
	//	*Tuple_LeftEntity
	//	*Tuple_LeftPrincipalId
	Left     isTuple_Left `protobuf_oneof:"left"`
	Relation string       `protobuf:"bytes,7,opt,name=relation,proto3" json:"relation,omitempty"`
	// Types that are assignable to Right:
	//
	//	*Tuple_RightEntity
	//	*Tuple_RightPrincipalId
	Right      isTuple_Right    `protobuf_oneof:"right"`
	Strand     *string          `protobuf:"bytes,8,opt,name=strand,proto3,oneof" json:"strand,omitempty"`
	Attrs      *structpb.Struct `protobuf:"bytes,9,opt,name=attrs,proto3,oneof" json:"attrs,omitempty"`
	RefIdLeft  *string          `protobuf:"bytes,10,opt,name=ref_id_left,json=refIdLeft,proto3,oneof" json:"ref_id_left,omitempty"`
	RefIdRight *string          `protobuf:"bytes,11,opt,name=ref_id_right,json=refIdRight,proto3,oneof" json:"ref_id_right,omitempty"`
}

func (x *Tuple) Reset() {
	*x = Tuple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ruek_api_v1_relations_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tuple) ProtoMessage() {}

func (x *Tuple) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ruek_api_v1_relations_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tuple.ProtoReflect.Descriptor instead.
func (*Tuple) Descriptor() ([]byte, []int) {
	return file_proto_ruek_api_v1_relations_proto_rawDescGZIP(), []int{1}
}

func (x *Tuple) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *Tuple) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *Tuple) GetLeft() isTuple_Left {
	if m != nil {
		return m.Left
	}
	return nil
}

func (x *Tuple) GetLeftEntity() *Entity {
	if x, ok := x.GetLeft().(*Tuple_LeftEntity); ok {
		return x.LeftEntity
	}
	return nil
}

func (x *Tuple) GetLeftPrincipalId() string {
	if x, ok := x.GetLeft().(*Tuple_LeftPrincipalId); ok {
		return x.LeftPrincipalId
	}
	return ""
}

func (x *Tuple) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

func (m *Tuple) GetRight() isTuple_Right {
	if m != nil {
		return m.Right
	}
	return nil
}

func (x *Tuple) GetRightEntity() *Entity {
	if x, ok := x.GetRight().(*Tuple_RightEntity); ok {
		return x.RightEntity
	}
	return nil
}

func (x *Tuple) GetRightPrincipalId() string {
	if x, ok := x.GetRight().(*Tuple_RightPrincipalId); ok {
		return x.RightPrincipalId
	}
	return ""
}

func (x *Tuple) GetStrand() string {
	if x != nil && x.Strand != nil {
		return *x.Strand
	}
	return ""
}

func (x *Tuple) GetAttrs() *structpb.Struct {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *Tuple) GetRefIdLeft() string {
	if x != nil && x.RefIdLeft != nil {
		return *x.RefIdLeft
	}
	return ""
}

func (x *Tuple) GetRefIdRight() string {
	if x != nil && x.RefIdRight != nil {
		return *x.RefIdRight
	}
	return ""
}

type isTuple_Left interface {
	isTuple_Left()
}

type Tuple_LeftEntity struct {
	LeftEntity *Entity `protobuf:"bytes,3,opt,name=left_entity,json=leftEntity,proto3,oneof"`
}

type Tuple_LeftPrincipalId struct {
	LeftPrincipalId string `protobuf:"bytes,4,opt,name=left_principal_id,json=leftPrincipalId,proto3,oneof"`
}

func (*Tuple_LeftEntity) isTuple_Left() {}

func (*Tuple_LeftPrincipalId) isTuple_Left() {}

type isTuple_Right interface {
	isTuple_Right()
}

type Tuple_RightEntity struct {
	RightEntity *Entity `protobuf:"bytes,5,opt,name=right_entity,json=rightEntity,proto3,oneof"`
}

type Tuple_RightPrincipalId struct {
	RightPrincipalId string `protobuf:"bytes,6,opt,name=right_principal_id,json=rightPrincipalId,proto3,oneof"`
}

func (*Tuple_RightEntity) isTuple_Right() {}

func (*Tuple_RightPrincipalId) isTuple_Right() {}

type RelationsCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Left:
	//
	//	*RelationsCheckRequest_LeftEntity
	//	*RelationsCheckRequest_LeftPrincipalId
	Left     isRelationsCheckRequest_Left `protobuf_oneof:"left"`
	Relation string                       `protobuf:"bytes,5,opt,name=relation,proto3" json:"relation,omitempty"`
	// Types that are assignable to Right:
	//
	//	*RelationsCheckRequest_RightEntity
	//	*RelationsCheckRequest_RightPrincipalId
	Right isRelationsCheckRequest_Right `protobuf_oneof:"right"`
	// Lookup strategy to use. Defaults to `2` (direct).
	//
	// Strategies:
	//
	//	2 (direct) - Only check if there's a direct relation exists between the entities.
	//	4 (graph)  - If a direct relation cannot be found between the entities, use a graph traversal
	//	             algorithm to derive a relation.
	//	8 (set)    - Check if there's a direct relation exists between the entities and if not, use
	//	             a set intersection algorithm to derive a relation between the entities.
	Strategy *uint32 `protobuf:"varint,6,opt,name=strategy,proto3,oneof" json:"strategy,omitempty"`
	// Limits the lookup cost. The value must be within `1` and `65535`. Defaults to `1000`.
	CostLimit *uint32 `protobuf:"varint,7,opt,name=cost_limit,json=costLimit,proto3,oneof" json:"cost_limit,omitempty"`
}

func (x *RelationsCheckRequest) Reset() {
	*x = RelationsCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ruek_api_v1_relations_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationsCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationsCheckRequest) ProtoMessage() {}

func (x *RelationsCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ruek_api_v1_relations_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationsCheckRequest.ProtoReflect.Descriptor instead.
func (*RelationsCheckRequest) Descriptor() ([]byte, []int) {
	return file_proto_ruek_api_v1_relations_proto_rawDescGZIP(), []int{2}
}

func (m *RelationsCheckRequest) GetLeft() isRelationsCheckRequest_Left {
	if m != nil {
		return m.Left
	}
	return nil
}

func (x *RelationsCheckRequest) GetLeftEntity() *Entity {
	if x, ok := x.GetLeft().(*RelationsCheckRequest_LeftEntity); ok {
		return x.LeftEntity
	}
	return nil
}

func (x *RelationsCheckRequest) GetLeftPrincipalId() string {
	if x, ok := x.GetLeft().(*RelationsCheckRequest_LeftPrincipalId); ok {
		return x.LeftPrincipalId
	}
	return ""
}

func (x *RelationsCheckRequest) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

func (m *RelationsCheckRequest) GetRight() isRelationsCheckRequest_Right {
	if m != nil {
		return m.Right
	}
	return nil
}

func (x *RelationsCheckRequest) GetRightEntity() *Entity {
	if x, ok := x.GetRight().(*RelationsCheckRequest_RightEntity); ok {
		return x.RightEntity
	}
	return nil
}

func (x *RelationsCheckRequest) GetRightPrincipalId() string {
	if x, ok := x.GetRight().(*RelationsCheckRequest_RightPrincipalId); ok {
		return x.RightPrincipalId
	}
	return ""
}

func (x *RelationsCheckRequest) GetStrategy() uint32 {
	if x != nil && x.Strategy != nil {
		return *x.Strategy
	}
	return 0
}

func (x *RelationsCheckRequest) GetCostLimit() uint32 {
	if x != nil && x.CostLimit != nil {
		return *x.CostLimit
	}
	return 0
}

type isRelationsCheckRequest_Left interface {
	isRelationsCheckRequest_Left()
}

type RelationsCheckRequest_LeftEntity struct {
	LeftEntity *Entity `protobuf:"bytes,1,opt,name=left_entity,json=leftEntity,proto3,oneof"`
}

type RelationsCheckRequest_LeftPrincipalId struct {
	LeftPrincipalId string `protobuf:"bytes,2,opt,name=left_principal_id,json=leftPrincipalId,proto3,oneof"`
}

func (*RelationsCheckRequest_LeftEntity) isRelationsCheckRequest_Left() {}

func (*RelationsCheckRequest_LeftPrincipalId) isRelationsCheckRequest_Left() {}

type isRelationsCheckRequest_Right interface {
	isRelationsCheckRequest_Right()
}

type RelationsCheckRequest_RightEntity struct {
	RightEntity *Entity `protobuf:"bytes,3,opt,name=right_entity,json=rightEntity,proto3,oneof"`
}

type RelationsCheckRequest_RightPrincipalId struct {
	RightPrincipalId string `protobuf:"bytes,4,opt,name=right_principal_id,json=rightPrincipalId,proto3,oneof"`
}

func (*RelationsCheckRequest_RightEntity) isRelationsCheckRequest_Right() {}

func (*RelationsCheckRequest_RightPrincipalId) isRelationsCheckRequest_Right() {}

type RelationsCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates if a relation exists or could be derived using the lookup strategy.
	Found bool `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"`
	// Cost of lookups. A negative cost indicates the lookup cost exceeded the limit and the process
	// _may_ have been abandoned without computing all possible derivations.
	Cost int32 `protobuf:"varint,2,opt,name=cost,proto3" json:"cost,omitempty"`
	// Tuple containing relation data that matched the query. An empty tuple `id` indicates a computed
	// tuple which isn't stored.
	Tuple *Tuple `protobuf:"bytes,3,opt,name=tuple,proto3,oneof" json:"tuple,omitempty"`
	// Path that derived the relation between entities when using the `graph` lookup strategy.
	Path []*Tuple `protobuf:"bytes,4,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *RelationsCheckResponse) Reset() {
	*x = RelationsCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ruek_api_v1_relations_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationsCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationsCheckResponse) ProtoMessage() {}

func (x *RelationsCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ruek_api_v1_relations_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationsCheckResponse.ProtoReflect.Descriptor instead.
func (*RelationsCheckResponse) Descriptor() ([]byte, []int) {
	return file_proto_ruek_api_v1_relations_proto_rawDescGZIP(), []int{3}
}

func (x *RelationsCheckResponse) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

func (x *RelationsCheckResponse) GetCost() int32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *RelationsCheckResponse) GetTuple() *Tuple {
	if x != nil {
		return x.Tuple
	}
	return nil
}

func (x *RelationsCheckResponse) GetPath() []*Tuple {
	if x != nil {
		return x.Path
	}
	return nil
}

type RelationsCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Left:
	//
	//	*RelationsCreateRequest_LeftEntity
	//	*RelationsCreateRequest_LeftPrincipalId
	Left     isRelationsCreateRequest_Left `protobuf_oneof:"left"`
	Relation string                        `protobuf:"bytes,5,opt,name=relation,proto3" json:"relation,omitempty"`
	// Types that are assignable to Right:
	//
	//	*RelationsCreateRequest_RightEntity
	//	*RelationsCreateRequest_RightPrincipalId
	Right  isRelationsCreateRequest_Right `protobuf_oneof:"right"`
	Strand *string                        `protobuf:"bytes,6,opt,name=strand,proto3,oneof" json:"strand,omitempty"`
	Attrs  *structpb.Struct               `protobuf:"bytes,7,opt,name=attrs,proto3,oneof" json:"attrs,omitempty"`
	// Optimization strategy to use when computing and storing derived relations to improve lookup speeds.
	// Defaults to `4` (graph).
	//
	// Strategies:
	//
	//	2 (direct) - Optimize for direct lookups. Best for lookup speeds but can produce large numbers
	//	             of computed relations resulting in expensive write operations.
	//	4 (graph)  - Don't optimize. Lookups will need to use a graph traversal algorithm to derive
	//	             relations.
	//	8 (set)    - Optimize by computing derived relations between principals, which the lookups
	//	             can utilise in a set intersection algorithm.
	Optimize *uint32 `protobuf:"varint,8,opt,name=optimize,proto3,oneof" json:"optimize,omitempty"`
	// Limits the cost for computing and storing derived relations. The value must be within `1` and
	// `65535`. Defaults to `1000`.
	CostLimit *uint32 `protobuf:"varint,9,opt,name=cost_limit,json=costLimit,proto3,oneof" json:"cost_limit,omitempty"`
}

func (x *RelationsCreateRequest) Reset() {
	*x = RelationsCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ruek_api_v1_relations_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationsCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationsCreateRequest) ProtoMessage() {}

func (x *RelationsCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ruek_api_v1_relations_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationsCreateRequest.ProtoReflect.Descriptor instead.
func (*RelationsCreateRequest) Descriptor() ([]byte, []int) {
	return file_proto_ruek_api_v1_relations_proto_rawDescGZIP(), []int{4}
}

func (m *RelationsCreateRequest) GetLeft() isRelationsCreateRequest_Left {
	if m != nil {
		return m.Left
	}
	return nil
}

func (x *RelationsCreateRequest) GetLeftEntity() *Entity {
	if x, ok := x.GetLeft().(*RelationsCreateRequest_LeftEntity); ok {
		return x.LeftEntity
	}
	return nil
}

func (x *RelationsCreateRequest) GetLeftPrincipalId() string {
	if x, ok := x.GetLeft().(*RelationsCreateRequest_LeftPrincipalId); ok {
		return x.LeftPrincipalId
	}
	return ""
}

func (x *RelationsCreateRequest) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

func (m *RelationsCreateRequest) GetRight() isRelationsCreateRequest_Right {
	if m != nil {
		return m.Right
	}
	return nil
}

func (x *RelationsCreateRequest) GetRightEntity() *Entity {
	if x, ok := x.GetRight().(*RelationsCreateRequest_RightEntity); ok {
		return x.RightEntity
	}
	return nil
}

func (x *RelationsCreateRequest) GetRightPrincipalId() string {
	if x, ok := x.GetRight().(*RelationsCreateRequest_RightPrincipalId); ok {
		return x.RightPrincipalId
	}
	return ""
}

func (x *RelationsCreateRequest) GetStrand() string {
	if x != nil && x.Strand != nil {
		return *x.Strand
	}
	return ""
}

func (x *RelationsCreateRequest) GetAttrs() *structpb.Struct {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *RelationsCreateRequest) GetOptimize() uint32 {
	if x != nil && x.Optimize != nil {
		return *x.Optimize
	}
	return 0
}

func (x *RelationsCreateRequest) GetCostLimit() uint32 {
	if x != nil && x.CostLimit != nil {
		return *x.CostLimit
	}
	return 0
}

type isRelationsCreateRequest_Left interface {
	isRelationsCreateRequest_Left()
}

type RelationsCreateRequest_LeftEntity struct {
	LeftEntity *Entity `protobuf:"bytes,1,opt,name=left_entity,json=leftEntity,proto3,oneof"`
}

type RelationsCreateRequest_LeftPrincipalId struct {
	LeftPrincipalId string `protobuf:"bytes,2,opt,name=left_principal_id,json=leftPrincipalId,proto3,oneof"`
}

func (*RelationsCreateRequest_LeftEntity) isRelationsCreateRequest_Left() {}

func (*RelationsCreateRequest_LeftPrincipalId) isRelationsCreateRequest_Left() {}

type isRelationsCreateRequest_Right interface {
	isRelationsCreateRequest_Right()
}

type RelationsCreateRequest_RightEntity struct {
	RightEntity *Entity `protobuf:"bytes,3,opt,name=right_entity,json=rightEntity,proto3,oneof"`
}

type RelationsCreateRequest_RightPrincipalId struct {
	RightPrincipalId string `protobuf:"bytes,4,opt,name=right_principal_id,json=rightPrincipalId,proto3,oneof"`
}

func (*RelationsCreateRequest_RightEntity) isRelationsCreateRequest_Right() {}

func (*RelationsCreateRequest_RightPrincipalId) isRelationsCreateRequest_Right() {}

type RelationsCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tuple containing the relation data.
	Tuple *Tuple `protobuf:"bytes,1,opt,name=tuple,proto3" json:"tuple,omitempty"`
	// Cost of creating the relation. A negative cost indicates only the relation was created but computing
	// and storing derived relations was aborted.
	Cost int32 `protobuf:"varint,2,opt,name=cost,proto3" json:"cost,omitempty"`
	// Computed and _maybe_ stored derived relation tuples. If the `cost` returned is negative, this
	// _may_ contain a partial list. Any tuple with an empty id indicates it's only computed but not
	// stored (i.e. dirty).
	ComputedTuples []*Tuple `protobuf:"bytes,3,rep,name=computed_tuples,json=computedTuples,proto3" json:"computed_tuples,omitempty"`
}

func (x *RelationsCreateResponse) Reset() {
	*x = RelationsCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ruek_api_v1_relations_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationsCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationsCreateResponse) ProtoMessage() {}

func (x *RelationsCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ruek_api_v1_relations_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationsCreateResponse.ProtoReflect.Descriptor instead.
func (*RelationsCreateResponse) Descriptor() ([]byte, []int) {
	return file_proto_ruek_api_v1_relations_proto_rawDescGZIP(), []int{5}
}

func (x *RelationsCreateResponse) GetTuple() *Tuple {
	if x != nil {
		return x.Tuple
	}
	return nil
}

func (x *RelationsCreateResponse) GetCost() int32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *RelationsCreateResponse) GetComputedTuples() []*Tuple {
	if x != nil {
		return x.ComputedTuples
	}
	return nil
}

type RelationsDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Left:
	//
	//	*RelationsDeleteRequest_LeftEntity
	//	*RelationsDeleteRequest_LeftPrincipalId
	Left     isRelationsDeleteRequest_Left `protobuf_oneof:"left"`
	Relation string                        `protobuf:"bytes,5,opt,name=relation,proto3" json:"relation,omitempty"`
	// Types that are assignable to Right:
	//
	//	*RelationsDeleteRequest_RightEntity
	//	*RelationsDeleteRequest_RightPrincipalId
	Right  isRelationsDeleteRequest_Right `protobuf_oneof:"right"`
	Strand *string                        `protobuf:"bytes,6,opt,name=strand,proto3,oneof" json:"strand,omitempty"`
}

func (x *RelationsDeleteRequest) Reset() {
	*x = RelationsDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ruek_api_v1_relations_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationsDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationsDeleteRequest) ProtoMessage() {}

func (x *RelationsDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ruek_api_v1_relations_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationsDeleteRequest.ProtoReflect.Descriptor instead.
func (*RelationsDeleteRequest) Descriptor() ([]byte, []int) {
	return file_proto_ruek_api_v1_relations_proto_rawDescGZIP(), []int{6}
}

func (m *RelationsDeleteRequest) GetLeft() isRelationsDeleteRequest_Left {
	if m != nil {
		return m.Left
	}
	return nil
}

func (x *RelationsDeleteRequest) GetLeftEntity() *Entity {
	if x, ok := x.GetLeft().(*RelationsDeleteRequest_LeftEntity); ok {
		return x.LeftEntity
	}
	return nil
}

func (x *RelationsDeleteRequest) GetLeftPrincipalId() string {
	if x, ok := x.GetLeft().(*RelationsDeleteRequest_LeftPrincipalId); ok {
		return x.LeftPrincipalId
	}
	return ""
}

func (x *RelationsDeleteRequest) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

func (m *RelationsDeleteRequest) GetRight() isRelationsDeleteRequest_Right {
	if m != nil {
		return m.Right
	}
	return nil
}

func (x *RelationsDeleteRequest) GetRightEntity() *Entity {
	if x, ok := x.GetRight().(*RelationsDeleteRequest_RightEntity); ok {
		return x.RightEntity
	}
	return nil
}

func (x *RelationsDeleteRequest) GetRightPrincipalId() string {
	if x, ok := x.GetRight().(*RelationsDeleteRequest_RightPrincipalId); ok {
		return x.RightPrincipalId
	}
	return ""
}

func (x *RelationsDeleteRequest) GetStrand() string {
	if x != nil && x.Strand != nil {
		return *x.Strand
	}
	return ""
}

type isRelationsDeleteRequest_Left interface {
	isRelationsDeleteRequest_Left()
}

type RelationsDeleteRequest_LeftEntity struct {
	LeftEntity *Entity `protobuf:"bytes,1,opt,name=left_entity,json=leftEntity,proto3,oneof"`
}

type RelationsDeleteRequest_LeftPrincipalId struct {
	LeftPrincipalId string `protobuf:"bytes,2,opt,name=left_principal_id,json=leftPrincipalId,proto3,oneof"`
}

func (*RelationsDeleteRequest_LeftEntity) isRelationsDeleteRequest_Left() {}

func (*RelationsDeleteRequest_LeftPrincipalId) isRelationsDeleteRequest_Left() {}

type isRelationsDeleteRequest_Right interface {
	isRelationsDeleteRequest_Right()
}

type RelationsDeleteRequest_RightEntity struct {
	RightEntity *Entity `protobuf:"bytes,3,opt,name=right_entity,json=rightEntity,proto3,oneof"`
}

type RelationsDeleteRequest_RightPrincipalId struct {
	RightPrincipalId string `protobuf:"bytes,4,opt,name=right_principal_id,json=rightPrincipalId,proto3,oneof"`
}

func (*RelationsDeleteRequest_RightEntity) isRelationsDeleteRequest_Right() {}

func (*RelationsDeleteRequest_RightPrincipalId) isRelationsDeleteRequest_Right() {}

type RelationsDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RelationsDeleteResponse) Reset() {
	*x = RelationsDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ruek_api_v1_relations_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationsDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationsDeleteResponse) ProtoMessage() {}

func (x *RelationsDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ruek_api_v1_relations_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationsDeleteResponse.ProtoReflect.Descriptor instead.
func (*RelationsDeleteResponse) Descriptor() ([]byte, []int) {
	return file_proto_ruek_api_v1_relations_proto_rawDescGZIP(), []int{7}
}

type RelationsListLeftRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Right:
	//
	//	*RelationsListLeftRequest_RightEntity
	//	*RelationsListLeftRequest_RightPrincipalId
	Right           isRelationsListLeftRequest_Right `protobuf_oneof:"right"`
	Relation        *string                          `protobuf:"bytes,3,opt,name=relation,proto3,oneof" json:"relation,omitempty"`
	PaginationLimit *uint32                          `protobuf:"varint,4,opt,name=pagination_limit,json=paginationLimit,proto3,oneof" json:"pagination_limit,omitempty"`
	PaginationToken *string                          `protobuf:"bytes,5,opt,name=pagination_token,json=paginationToken,proto3,oneof" json:"pagination_token,omitempty"`
}

func (x *RelationsListLeftRequest) Reset() {
	*x = RelationsListLeftRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ruek_api_v1_relations_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationsListLeftRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationsListLeftRequest) ProtoMessage() {}

func (x *RelationsListLeftRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ruek_api_v1_relations_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationsListLeftRequest.ProtoReflect.Descriptor instead.
func (*RelationsListLeftRequest) Descriptor() ([]byte, []int) {
	return file_proto_ruek_api_v1_relations_proto_rawDescGZIP(), []int{8}
}

func (m *RelationsListLeftRequest) GetRight() isRelationsListLeftRequest_Right {
	if m != nil {
		return m.Right
	}
	return nil
}

func (x *RelationsListLeftRequest) GetRightEntity() *Entity {
	if x, ok := x.GetRight().(*RelationsListLeftRequest_RightEntity); ok {
		return x.RightEntity
	}
	return nil
}

func (x *RelationsListLeftRequest) GetRightPrincipalId() string {
	if x, ok := x.GetRight().(*RelationsListLeftRequest_RightPrincipalId); ok {
		return x.RightPrincipalId
	}
	return ""
}

func (x *RelationsListLeftRequest) GetRelation() string {
	if x != nil && x.Relation != nil {
		return *x.Relation
	}
	return ""
}

func (x *RelationsListLeftRequest) GetPaginationLimit() uint32 {
	if x != nil && x.PaginationLimit != nil {
		return *x.PaginationLimit
	}
	return 0
}

func (x *RelationsListLeftRequest) GetPaginationToken() string {
	if x != nil && x.PaginationToken != nil {
		return *x.PaginationToken
	}
	return ""
}

type isRelationsListLeftRequest_Right interface {
	isRelationsListLeftRequest_Right()
}

type RelationsListLeftRequest_RightEntity struct {
	RightEntity *Entity `protobuf:"bytes,1,opt,name=right_entity,json=rightEntity,proto3,oneof"`
}

type RelationsListLeftRequest_RightPrincipalId struct {
	RightPrincipalId string `protobuf:"bytes,2,opt,name=right_principal_id,json=rightPrincipalId,proto3,oneof"`
}

func (*RelationsListLeftRequest_RightEntity) isRelationsListLeftRequest_Right() {}

func (*RelationsListLeftRequest_RightPrincipalId) isRelationsListLeftRequest_Right() {}

type RelationsListLeftResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tuples          []*Tuple `protobuf:"bytes,1,rep,name=tuples,proto3" json:"tuples,omitempty"`
	PaginationToken *string  `protobuf:"bytes,2,opt,name=pagination_token,json=paginationToken,proto3,oneof" json:"pagination_token,omitempty"`
}

func (x *RelationsListLeftResponse) Reset() {
	*x = RelationsListLeftResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ruek_api_v1_relations_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationsListLeftResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationsListLeftResponse) ProtoMessage() {}

func (x *RelationsListLeftResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ruek_api_v1_relations_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationsListLeftResponse.ProtoReflect.Descriptor instead.
func (*RelationsListLeftResponse) Descriptor() ([]byte, []int) {
	return file_proto_ruek_api_v1_relations_proto_rawDescGZIP(), []int{9}
}

func (x *RelationsListLeftResponse) GetTuples() []*Tuple {
	if x != nil {
		return x.Tuples
	}
	return nil
}

func (x *RelationsListLeftResponse) GetPaginationToken() string {
	if x != nil && x.PaginationToken != nil {
		return *x.PaginationToken
	}
	return ""
}

type RelationsListRightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Left:
	//
	//	*RelationsListRightRequest_LeftEntity
	//	*RelationsListRightRequest_LeftPrincipalId
	Left            isRelationsListRightRequest_Left `protobuf_oneof:"left"`
	Relation        *string                          `protobuf:"bytes,3,opt,name=relation,proto3,oneof" json:"relation,omitempty"`
	PaginationLimit *uint32                          `protobuf:"varint,4,opt,name=pagination_limit,json=paginationLimit,proto3,oneof" json:"pagination_limit,omitempty"`
	PaginationToken *string                          `protobuf:"bytes,5,opt,name=pagination_token,json=paginationToken,proto3,oneof" json:"pagination_token,omitempty"`
}

func (x *RelationsListRightRequest) Reset() {
	*x = RelationsListRightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ruek_api_v1_relations_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationsListRightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationsListRightRequest) ProtoMessage() {}

func (x *RelationsListRightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ruek_api_v1_relations_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationsListRightRequest.ProtoReflect.Descriptor instead.
func (*RelationsListRightRequest) Descriptor() ([]byte, []int) {
	return file_proto_ruek_api_v1_relations_proto_rawDescGZIP(), []int{10}
}

func (m *RelationsListRightRequest) GetLeft() isRelationsListRightRequest_Left {
	if m != nil {
		return m.Left
	}
	return nil
}

func (x *RelationsListRightRequest) GetLeftEntity() *Entity {
	if x, ok := x.GetLeft().(*RelationsListRightRequest_LeftEntity); ok {
		return x.LeftEntity
	}
	return nil
}

func (x *RelationsListRightRequest) GetLeftPrincipalId() string {
	if x, ok := x.GetLeft().(*RelationsListRightRequest_LeftPrincipalId); ok {
		return x.LeftPrincipalId
	}
	return ""
}

func (x *RelationsListRightRequest) GetRelation() string {
	if x != nil && x.Relation != nil {
		return *x.Relation
	}
	return ""
}

func (x *RelationsListRightRequest) GetPaginationLimit() uint32 {
	if x != nil && x.PaginationLimit != nil {
		return *x.PaginationLimit
	}
	return 0
}

func (x *RelationsListRightRequest) GetPaginationToken() string {
	if x != nil && x.PaginationToken != nil {
		return *x.PaginationToken
	}
	return ""
}

type isRelationsListRightRequest_Left interface {
	isRelationsListRightRequest_Left()
}

type RelationsListRightRequest_LeftEntity struct {
	LeftEntity *Entity `protobuf:"bytes,1,opt,name=left_entity,json=leftEntity,proto3,oneof"`
}

type RelationsListRightRequest_LeftPrincipalId struct {
	LeftPrincipalId string `protobuf:"bytes,2,opt,name=left_principal_id,json=leftPrincipalId,proto3,oneof"`
}

func (*RelationsListRightRequest_LeftEntity) isRelationsListRightRequest_Left() {}

func (*RelationsListRightRequest_LeftPrincipalId) isRelationsListRightRequest_Left() {}

type RelationsListRightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tuples          []*Tuple `protobuf:"bytes,1,rep,name=tuples,proto3" json:"tuples,omitempty"`
	PaginationToken *string  `protobuf:"bytes,2,opt,name=pagination_token,json=paginationToken,proto3,oneof" json:"pagination_token,omitempty"`
}

func (x *RelationsListRightResponse) Reset() {
	*x = RelationsListRightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ruek_api_v1_relations_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationsListRightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationsListRightResponse) ProtoMessage() {}

func (x *RelationsListRightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ruek_api_v1_relations_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationsListRightResponse.ProtoReflect.Descriptor instead.
func (*RelationsListRightResponse) Descriptor() ([]byte, []int) {
	return file_proto_ruek_api_v1_relations_proto_rawDescGZIP(), []int{11}
}

func (x *RelationsListRightResponse) GetTuples() []*Tuple {
	if x != nil {
		return x.Tuples
	}
	return nil
}

func (x *RelationsListRightResponse) GetPaginationToken() string {
	if x != nil && x.PaginationToken != nil {
		return *x.PaginationToken
	}
	return ""
}

var File_proto_ruek_api_v1_relations_proto protoreflect.FileDescriptor

var file_proto_ruek_api_v1_relations_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x75, 0x65, 0x6b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x72, 0x75, 0x65, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2c,
	0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x82, 0x04, 0x0a,
	0x05, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x36, 0x0a, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x65, 0x6b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x6c,
	0x65, 0x66, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x65, 0x66,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x65, 0x6b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x01,
	0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a,
	0x12, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x61, 0x74,
	0x74, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x48, 0x03, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0b, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x72, 0x65, 0x66, 0x49, 0x64, 0x4c, 0x65, 0x66, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x66,
	0x49, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x6c, 0x65,
	0x66, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x73,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x65, 0x66, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x22, 0xf5, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x6c,
	0x65, 0x66, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x72, 0x75, 0x65, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0f, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x65, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x01, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x08, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04,
	0x6c, 0x65, 0x66, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x16, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x05, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x72, 0x75, 0x65, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x75,
	0x65, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x22,
	0xdc, 0x03, 0x0a, 0x16, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x6c, 0x65,
	0x66, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x72, 0x75, 0x65, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0f, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x65, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x01, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x03, 0x52, 0x05, 0x61,
	0x74, 0x74, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x08, 0x6f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x09,
	0x63, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04,
	0x6c, 0x65, 0x66, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x94,
	0x01, 0x0a, 0x17, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x75,
	0x70, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x75, 0x65, 0x6b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x74,
	0x75, 0x70, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x72, 0x75, 0x65, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x54,
	0x75, 0x70, 0x6c, 0x65, 0x73, 0x22, 0xbd, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x65, 0x6b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x65,
	0x66, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x65, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x01, 0x52,
	0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x12,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x06,
	0x73, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x6c, 0x65, 0x66,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x74, 0x72, 0x61, 0x6e, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xc5, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x65, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x02, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x75, 0x65, 0x6b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x06, 0x74, 0x75, 0x70, 0x6c,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc1, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x65,
	0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a,
	0x11, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x65, 0x66, 0x74,
	0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04,
	0x6c, 0x65, 0x66, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x1a,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x75,
	0x70, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x75, 0x65,
	0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x06,
	0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0xc0, 0x03, 0x0a, 0x09,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x05, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x12, 0x22, 0x2e, 0x72, 0x75, 0x65, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x75, 0x65, 0x6b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x72, 0x75, 0x65, 0x6b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x75, 0x65,
	0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x53, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x72, 0x75, 0x65,
	0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x72, 0x75, 0x65, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x66,
	0x74, 0x12, 0x25, 0x2e, 0x72, 0x75, 0x65, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x66,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x75, 0x65, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5c, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x2e,
	0x72, 0x75, 0x65, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x72, 0x75, 0x65, 0x6b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x34,
	0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x61, 0x74,
	0x75, 0x6b, 0x6f, 0x2f, 0x72, 0x75, 0x65, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x2e,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x72, 0x75, 0x65, 0x6b, 0x70, 0x62, 0x3b, 0x72, 0x75,
	0x65, 0x6b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_ruek_api_v1_relations_proto_rawDescOnce sync.Once
	file_proto_ruek_api_v1_relations_proto_rawDescData = file_proto_ruek_api_v1_relations_proto_rawDesc
)

func file_proto_ruek_api_v1_relations_proto_rawDescGZIP() []byte {
	file_proto_ruek_api_v1_relations_proto_rawDescOnce.Do(func() {
		file_proto_ruek_api_v1_relations_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_ruek_api_v1_relations_proto_rawDescData)
	})
	return file_proto_ruek_api_v1_relations_proto_rawDescData
}

var file_proto_ruek_api_v1_relations_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_proto_ruek_api_v1_relations_proto_goTypes = []interface{}{
	(*Entity)(nil),                     // 0: ruek.api.v1.Entity
	(*Tuple)(nil),                      // 1: ruek.api.v1.Tuple
	(*RelationsCheckRequest)(nil),      // 2: ruek.api.v1.RelationsCheckRequest
	(*RelationsCheckResponse)(nil),     // 3: ruek.api.v1.RelationsCheckResponse
	(*RelationsCreateRequest)(nil),     // 4: ruek.api.v1.RelationsCreateRequest
	(*RelationsCreateResponse)(nil),    // 5: ruek.api.v1.RelationsCreateResponse
	(*RelationsDeleteRequest)(nil),     // 6: ruek.api.v1.RelationsDeleteRequest
	(*RelationsDeleteResponse)(nil),    // 7: ruek.api.v1.RelationsDeleteResponse
	(*RelationsListLeftRequest)(nil),   // 8: ruek.api.v1.RelationsListLeftRequest
	(*RelationsListLeftResponse)(nil),  // 9: ruek.api.v1.RelationsListLeftResponse
	(*RelationsListRightRequest)(nil),  // 10: ruek.api.v1.RelationsListRightRequest
	(*RelationsListRightResponse)(nil), // 11: ruek.api.v1.RelationsListRightResponse
	(*structpb.Struct)(nil),            // 12: google.protobuf.Struct
}
var file_proto_ruek_api_v1_relations_proto_depIdxs = []int32{
	0,  // 0: ruek.api.v1.Tuple.left_entity:type_name -> ruek.api.v1.Entity
	0,  // 1: ruek.api.v1.Tuple.right_entity:type_name -> ruek.api.v1.Entity
	12, // 2: ruek.api.v1.Tuple.attrs:type_name -> google.protobuf.Struct
	0,  // 3: ruek.api.v1.RelationsCheckRequest.left_entity:type_name -> ruek.api.v1.Entity
	0,  // 4: ruek.api.v1.RelationsCheckRequest.right_entity:type_name -> ruek.api.v1.Entity
	1,  // 5: ruek.api.v1.RelationsCheckResponse.tuple:type_name -> ruek.api.v1.Tuple
	1,  // 6: ruek.api.v1.RelationsCheckResponse.path:type_name -> ruek.api.v1.Tuple
	0,  // 7: ruek.api.v1.RelationsCreateRequest.left_entity:type_name -> ruek.api.v1.Entity
	0,  // 8: ruek.api.v1.RelationsCreateRequest.right_entity:type_name -> ruek.api.v1.Entity
	12, // 9: ruek.api.v1.RelationsCreateRequest.attrs:type_name -> google.protobuf.Struct
	1,  // 10: ruek.api.v1.RelationsCreateResponse.tuple:type_name -> ruek.api.v1.Tuple
	1,  // 11: ruek.api.v1.RelationsCreateResponse.computed_tuples:type_name -> ruek.api.v1.Tuple
	0,  // 12: ruek.api.v1.RelationsDeleteRequest.left_entity:type_name -> ruek.api.v1.Entity
	0,  // 13: ruek.api.v1.RelationsDeleteRequest.right_entity:type_name -> ruek.api.v1.Entity
	0,  // 14: ruek.api.v1.RelationsListLeftRequest.right_entity:type_name -> ruek.api.v1.Entity
	1,  // 15: ruek.api.v1.RelationsListLeftResponse.tuples:type_name -> ruek.api.v1.Tuple
	0,  // 16: ruek.api.v1.RelationsListRightRequest.left_entity:type_name -> ruek.api.v1.Entity
	1,  // 17: ruek.api.v1.RelationsListRightResponse.tuples:type_name -> ruek.api.v1.Tuple
	2,  // 18: ruek.api.v1.Relations.Check:input_type -> ruek.api.v1.RelationsCheckRequest
	4,  // 19: ruek.api.v1.Relations.Create:input_type -> ruek.api.v1.RelationsCreateRequest
	6,  // 20: ruek.api.v1.Relations.Delete:input_type -> ruek.api.v1.RelationsDeleteRequest
	8,  // 21: ruek.api.v1.Relations.ListLeft:input_type -> ruek.api.v1.RelationsListLeftRequest
	10, // 22: ruek.api.v1.Relations.ListRight:input_type -> ruek.api.v1.RelationsListRightRequest
	3,  // 23: ruek.api.v1.Relations.Check:output_type -> ruek.api.v1.RelationsCheckResponse
	5,  // 24: ruek.api.v1.Relations.Create:output_type -> ruek.api.v1.RelationsCreateResponse
	7,  // 25: ruek.api.v1.Relations.Delete:output_type -> ruek.api.v1.RelationsDeleteResponse
	9,  // 26: ruek.api.v1.Relations.ListLeft:output_type -> ruek.api.v1.RelationsListLeftResponse
	11, // 27: ruek.api.v1.Relations.ListRight:output_type -> ruek.api.v1.RelationsListRightResponse
	23, // [23:28] is the sub-list for method output_type
	18, // [18:23] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_proto_ruek_api_v1_relations_proto_init() }
func file_proto_ruek_api_v1_relations_proto_init() {
	if File_proto_ruek_api_v1_relations_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_ruek_api_v1_relations_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ruek_api_v1_relations_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tuple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ruek_api_v1_relations_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationsCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ruek_api_v1_relations_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationsCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ruek_api_v1_relations_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationsCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ruek_api_v1_relations_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationsCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ruek_api_v1_relations_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationsDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ruek_api_v1_relations_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationsDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ruek_api_v1_relations_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationsListLeftRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ruek_api_v1_relations_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationsListLeftResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ruek_api_v1_relations_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationsListRightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ruek_api_v1_relations_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationsListRightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_ruek_api_v1_relations_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Tuple_LeftEntity)(nil),
		(*Tuple_LeftPrincipalId)(nil),
		(*Tuple_RightEntity)(nil),
		(*Tuple_RightPrincipalId)(nil),
	}
	file_proto_ruek_api_v1_relations_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*RelationsCheckRequest_LeftEntity)(nil),
		(*RelationsCheckRequest_LeftPrincipalId)(nil),
		(*RelationsCheckRequest_RightEntity)(nil),
		(*RelationsCheckRequest_RightPrincipalId)(nil),
	}
	file_proto_ruek_api_v1_relations_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_proto_ruek_api_v1_relations_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*RelationsCreateRequest_LeftEntity)(nil),
		(*RelationsCreateRequest_LeftPrincipalId)(nil),
		(*RelationsCreateRequest_RightEntity)(nil),
		(*RelationsCreateRequest_RightPrincipalId)(nil),
	}
	file_proto_ruek_api_v1_relations_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*RelationsDeleteRequest_LeftEntity)(nil),
		(*RelationsDeleteRequest_LeftPrincipalId)(nil),
		(*RelationsDeleteRequest_RightEntity)(nil),
		(*RelationsDeleteRequest_RightPrincipalId)(nil),
	}
	file_proto_ruek_api_v1_relations_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*RelationsListLeftRequest_RightEntity)(nil),
		(*RelationsListLeftRequest_RightPrincipalId)(nil),
	}
	file_proto_ruek_api_v1_relations_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_proto_ruek_api_v1_relations_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*RelationsListRightRequest_LeftEntity)(nil),
		(*RelationsListRightRequest_LeftPrincipalId)(nil),
	}
	file_proto_ruek_api_v1_relations_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_ruek_api_v1_relations_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_ruek_api_v1_relations_proto_goTypes,
		DependencyIndexes: file_proto_ruek_api_v1_relations_proto_depIdxs,
		MessageInfos:      file_proto_ruek_api_v1_relations_proto_msgTypes,
	}.Build()
	File_proto_ruek_api_v1_relations_proto = out.File
	file_proto_ruek_api_v1_relations_proto_rawDesc = nil
	file_proto_ruek_api_v1_relations_proto_goTypes = nil
	file_proto_ruek_api_v1_relations_proto_depIdxs = nil
}
